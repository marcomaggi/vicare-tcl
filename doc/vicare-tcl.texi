\input texinfo.tex
@c %**start of header
@setfilename vicare-tcl.info
@settitle Tcl for Vicare
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Tcl for Vicare

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/@tcl{}

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-tcl

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2015

@c ------------------------------------------------------------

@set FOREIGN_PACKAGE            @tcl{}
@set FOREIGN_VERSION            8.6.4
@set FOREIGN_URL                @url{http:/@//@/www.tcl.tk/}
@set FOREIGN_SCHEME_LIB         @library{vicare languages tcl}
@set NAUSICAA_SCHEME_LIB        @library{nausicaa languages tcl}
@set GITHUB_URL                 @url{http:/@//@/github.com/@/marcomaggi/@/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https:/@//@/bitbucket.org/@/marcomaggi/@/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https:/@//@/bitbucket.org/@/marcomaggi/@/@value{PACKAGE_NICKNAME}/@/downloads}
@set DOCUMENTATION_URL          @url{http:/@//@/marcomaggi.github.io/@/docs/@/@value{PACKAGE_NICKNAME}.html}
@set VICARE_HOMEPAGE_URL        @url{http:/@//@/marcomaggi.github.io/@/vicare.html}

@macro tclman{NODE, TITLE}
@xref{\NODE\,\TITLE\,\TITLE\,*manpages*}
@end macro

@macro tcl{}
@acronym{TCL}
@end macro

@macro tk{}
@acronym{TK}
@end macro

@macro tclcmd{NAME}
@code{[\NAME\]}
@end macro

@macro tclcode{CODE}
@code{[\CODE\]}
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the
@value{FOREIGN_PACKAGE} C language library.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
@value{FOREIGN_PACKAGE} is available at:

@center @value{FOREIGN_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-tcl: (vicare-tcl).     @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* plain::                       Plain programming interface.
@c * nau::                         Nausicaa programming interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the @value{FOREIGN_PACKAGE} C language library.

The last time the author bothered to update this paragraph, he had
tested @value{FOREIGN_PACKAGE} version @value{FOREIGN_VERSION}; the
@value{FOREIGN_PACKAGE} package is available at:

@center @value{FOREIGN_URL}

The package installs a C language library implementing driver C
functions for the C language @value{FOREIGN_PACKAGE} library, making
@tcl{} an embedded language for Vicare Scheme; on top of this, the
Scheme library @value{FOREIGN_SCHEME_LIB} exports an @api{} that allows
the evaluation of @tcl{} scripts from Scheme; additionally the library
@library{vicare languages tcl constants} exports one binding for each
useful constant value defined in the C language header @file{tcl.h}.

The following Scheme libraries are installed:

@table @asis
@item @library{vicare languages tcl}
@cindex Library @library{vicare languages tcl}
@cindex @library{vicare languages tcl}, library
It exports an @api{} that allows the evaluation of @tcl{} scripts from
Scheme.

@item @library{vicare languages tcl unsafe-capi}
@cindex Library @library{vicare languages tcl unsafe-capi}
@cindex @library{vicare languages tcl unsafe-capi}, library
It exports one keyword syntactic binding for each function in the C
language @api{}.

These syntaxes expand to a direct call to the C language interface
functions in the @value{PACKAGE} library; they are not meant to be
called in normal usage of the package.

@item @library{vicare languages tcl constants}
@cindex Library @library{vicare languages tcl constants}
@cindex @library{vicare languages tcl constants}, library
It exports one binding for each useful constant value defined in the C
language header @file{tcl.h}.

@item @library{vicare languages tcl features}
@cindex Library @library{vicare languages tcl features}
@cindex @library{vicare languages tcl features}, library
It exports one identifier syntax binding for each @code{HAVE_} constant
defined by the @command{configure} script, expanding to @true{} or
@false{}.

@item @library{nausicaa languages tcl}
@cindex Library @library{nausicaa languages tcl}
@cindex @library{nausicaa languages tcl}, library
An @oopp{} @api{} built on top of the @library{nausicaa} language and
the library @library{vicare languages tcl}.
@end table

Scheme libraries are installed under the directory:

@center @file{$(libdir)/vicare-scheme}

This document contains only a brief description of the functions: refer
to the @value{FOREIGN_PACKAGE}'s documentation for details.

@c page
@node plain
@chapter Plain programming interface


@cindex Library @value{FOREIGN_SCHEME_LIB}
@cindex @value{FOREIGN_SCHEME_LIB}, library


The library @value{FOREIGN_SCHEME_LIB} implements the high level @api{}
for @value{FOREIGN_PACKAGE}.

@menu
* plain version::               @value{PACKAGE} version informations.
* plain obj::                   @tcl{} objects.
* plain interp::                @tcl{} interpreter objects.
* plain misc::                  Miscellaneous operations.
@end menu

@c page
@node plain version
@section @value{PACKAGE} version informations


The installed C library follows version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.

The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun vicare-tcl-version-interface-current
@defunx vicare-tcl-version-interface-revision
@defunx vicare-tcl-version-interface-age
Return a fixnum representing a @value{PACKAGE} version number.
@end defun


@defun vicare-tcl-version
Return a Scheme string representing the @value{PACKAGE} version number.
@end defun


@defun tcl-major-version
@defunx tcl-minor-version
@defunx tcl-release-serial
Return a fixnum representing a @tcl{} version number.  These numbers are
the values of the C language preprocessor symbols:

@example
TCL_MAJOR_VERSION
TCL_MINOR_VERSION
TCL_RELEASE_SERIAL
@end example

@noindent
defined in the header file @file{tcl.h}.
@end defun


@defun tcl-patch-level
Return a Scheme string representing the @tcl{} version number.  This
number is the value of the C language preprocessor symbol
@code{TCL_PATCH_LEVEL} defined in the header file @file{tcl.h}.
@end defun

@c page
@node plain obj
@section @tcl{} objects


@menu
* plain obj struct::         @tcl{} object data structure.
* plain obj ops::            Operating on @tcl{} objects.
* plain obj conversion::     Converting @tcl{} objects.
@end menu

@c page
@node plain obj struct
@subsection Obj data structure


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@deftp {Struct Type} tcl-obj
@cindex Argument @var{tclobj}
@cindex @var{tclobj} argument
Opaque structure type referencing an instance of the C language type
@code{Tcl_Obj}.  When instances of this type are used as arguments to
functions: this documentation identifies them as @var{tclobj}.

Instances of this type must be finalised with @func{tcl-obj-finalise};
whenever an instance of this type is garbage collected:
@func{tcl-obj-finalise} is automatically applied to it and any error
ignored.

In certain contexts, instances of this type own the referenced
@code{Tcl_Obj} value, in other contexts they do not:

@itemize
@item
Finalising a @objtype{tcl-obj} instance owning the @code{Tcl_Obj} value,
causes finalisation of the @code{Tcl_Obj} value too.

@item
Finalising a @objtype{tcl-obj} instance @strong{not} owning the
@code{Tcl_Obj} value, leaves the @code{Tcl_Obj} untouched.
@end itemize

@noindent
this should happen transparently.
@end deftp


@defun tcl-obj? @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{tcl-obj};
otherwise return @false{}.
@end defun


@defun tcl-obj?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{tcl-obj} and it
has not been finalised; return @false{} otherwise.
@end defun

@c ------------------------------------------------------------

@subsubheading Object properties


@defun tcl-obj-putprop @var{obj} @var{key} @var{value}
Add a new property @var{key} to the property list of @var{obj};
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defun


@defun tcl-obj-getprop @var{obj} @var{key}
Return the value of the property @var{key} in the property list of
@var{obj}; if @var{key} is not set: return @false{}.  @var{key} must
be a symbol.
@end defun


@defun tcl-obj-remprop @var{obj} @var{key}
Remove the property @var{key} from the property list of @var{obj}; if
@var{key} is not set: nothing happens.  @var{key} must be a symbol.
@end defun


@defun tcl-obj-property-list @var{obj}
Return a new association list representing the property list of
@var{obj}.  The order of the entries is the same as the property
creation order.
@end defun

@c ------------------------------------------------------------

@subsubheading Custom destructor


@defun tcl-obj-custom-destructor @var{obj}
@defunx set-tcl-obj-custom-destructor! @var{obj} @var{func}
Retrieve or set a destructor function associated to @var{obj}.

Whenever @var{obj} is finalised, either explicitly with
@func{tcl-obj-finalise} or implicitly by the garbage collector,
@var{func} is applied to @var{obj} before the internal state of
@var{obj} is destroyed.
@end defun

@c ------------------------------------------------------------

@subsubheading Other operations


@defun tcl-obj-hash @var{obj}
Return an exact integer to be used as hashtable key for @var{obj}.
Hashtables having a @objtype{tcl-obj} as key can be instantiated
as follows:

@example
(make-hashtable tcl-obj-hash eq?)
@end example
@end defun

@c page
@node plain obj ops
@subsection Operating on obj objects


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun tcl-obj-finalise @var{tclobj}
Finalise @var{tclobj}; return unspecified values.  It is fine to apply
this function multiple times to the same @var{tclobj} value: the first
time the underlying data is finalised, the subsequent times nothing
happens.

If this function is applied to an @var{tclobj} value not owning the
underlying @code{Tcl_Obj} value: @var{tclobj} is finalised, but the
@code{Tcl_Obj} value is left alone.

After an invocation to this function: @tcl{} code can no longer be
evaluated in @var{tclobj}; to apply this function is equivalent to
invoking @tclcode{obj delete} upon the objreter.
@end defun

@c page
@node plain obj conversion
@subsection Converting @tcl{} objects


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.

@c ------------------------------------------------------------------------

@subsubheading String objects


@defun tcl-obj-make-string @var{str}
@defunx tcl-obj-make-string @var{str} @var{str.len}
Build and return a new @objtype{tcl-obj} object holding a @tcl{}
representation of @var{general-string}; if an error occurs raise an
exception.  The arguments @var{str} and @var{str.len} must be a
generalised C string, @cstringsref{}.
@end defun


@defun string->tcl-obj @var{str}
Build and return a new @objtype{tcl-obj} object holding a @tcl{}
representation of @var{str}, which must be a Scheme string; if an error
occurs raise an exception.
@end defun


@defun tcl-obj->bytevector-string @var{tclobj}
Return a Scheme bytevector containing the @utf{}-8 representation of
@var{tclobj} as string.
@end defun


@defun tcl-obj->string @var{tclobj}
Return a Scheme string containing the string representation of
@var{tclobj}.
@end defun

@c ------------------------------------------------------------------------

@subsubheading Boolean objects


@defun tcl-obj->boolean @var{tclobj}
Return a Scheme boolean representing @var{tclobj} as boolean.

@lisp
(tcl-obj->boolean (boolean->tcl-obj #t)))       @result{} #t
(tcl-obj->boolean (boolean->tcl-obj #f)))       @result{} #f

(tcl-obj->boolean (string->tcl-obj "yes")))     @result{} #t
(tcl-obj->boolean (string->tcl-obj "no")))      @result{} #f

(tcl-obj->boolean (string->tcl-obj "true")))    @result{} #t
(tcl-obj->boolean (string->tcl-obj "false")))   @result{} #f

(tcl-obj->boolean (string->tcl-obj "on")))      @result{} #t
(tcl-obj->boolean (string->tcl-obj "off")))     @result{} #f

(tcl-obj->boolean (string->tcl-obj "1")))       @result{} #t
(tcl-obj->boolean (string->tcl-obj "0")))       @result{} #f
@end lisp
@end defun


@defun boolean->tcl-obj @var{bool}
Return a @objtype{tcl-obj} instance representing a boolean value.  If
@var{bool} is @false{}: the boolean value is false; otherwise it is
true.
@end defun

@c page
@node plain interp
@section Interp objects


@menu
* plain interp struct::         Interp data structure.
* plain interp ops::            Operating on interp objects.
@end menu

@c page
@node plain interp struct
@subsection Interp data structure


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@deftp {Struct Type} tcl-interp
@cindex Argument @var{interp}
@cindex @var{interp} argument
Opaque structure type referencing an instance of the C language type
@code{Tcl_Interp}.  When instances of this type are used as arguments to
functions: this documentation identifies them as @var{interp}.

Instances of this type must be finalised with
@func{tcl-interp-finalise}; whenever an instance of this type is garbage
collected: @func{tcl-interp-finalise} is automatically applied to it and
any error ignored.

In certain contexts, instances of this type own the referenced
@code{Tcl_Interp} value, in other contexts they do not:

@itemize
@item
Finalising a @objtype{tcl-interp} instance owning the @code{Tcl_Interp}
value, causes finalisation of the @code{Tcl_Interp} value too.

@item
Finalising a @objtype{tcl-interp} instance @strong{not} owning the
@code{Tcl_Interp} value, leaves the @code{Tcl_Interp} untouched.
@end itemize

@noindent
this should happen transparently.
@end deftp


@defun tcl-interp? @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{tcl-interp};
otherwise return @false{}.
@end defun


@defun tcl-interp?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @objtype{tcl-interp} and
it has not been finalised; return @false{} otherwise.
@end defun

@c ------------------------------------------------------------

@subsubheading Object properties


@defun tcl-interp-putprop @var{interp} @var{key} @var{value}
Add a new property @var{key} to the property list of @var{interp};
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defun


@defun tcl-interp-getprop @var{interp} @var{key}
Return the value of the property @var{key} in the property list of
@var{interp}; if @var{key} is not set: return @false{}.  @var{key} must
be a symbol.
@end defun


@defun tcl-interp-remprop @var{interp} @var{key}
Remove the property @var{key} from the property list of @var{interp}; if
@var{key} is not set: nothing happens.  @var{key} must be a symbol.
@end defun


@defun tcl-interp-property-list @var{interp}
Return a new association list representing the property list of
@var{interp}.  The order of the entries is the same as the property
creation order.
@end defun

@c ------------------------------------------------------------

@subsubheading Custom destructor


@defun tcl-interp-custom-destructor @var{interp}
@defunx set-tcl-interp-custom-destructor! @var{interp} @var{func}
Retrieve or set a destructor function associated to @var{interp}.

Whenever @var{interp} is finalised, either explicitly with
@func{tcl-interp-finalise} or implicitly by the garbage collector,
@var{func} is applied to @var{interp} before the internal state of
@var{interp} is destroyed.
@end defun

@c ------------------------------------------------------------

@subsubheading Other operations


@defun tcl-interp-hash @var{interp}
Return an exact integer to be used as hashtable key for @var{interp}.
Hashtables having a @objtype{tcl-interp} as key can be instantiated
as follows:

@example
(make-hashtable tcl-interp-hash eq?)
@end example
@end defun

@c page
@node plain interp ops
@subsection Operating on interp objects


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun tcl-interp-initialise
Build and return a new @objtype{tcl-interp} object; if an error
occurs raise an exception.

The built in @tcl{} command @tclcmd{exit} command is @strong{removed}
from the returned interpreter because it causes the whole Vicare process
to terminate.  If we desire: we have to create our own @tclcmd{exit}
procedure to replace it; @value{PACKAGE} does not implement a
replacement.

@quotation
@strong{NOTE} The only way to create a safe @tcl{} interpreter is to
create it as slave of one created with this function.
@end quotation
@end defun


@defun tcl-interp-finalise @var{interp}
Finalise @var{interp}; return unspecified values.  It is fine to apply
this function multiple times to the same @var{interp} value: the first
time the underlying data is finalised, the subsequent times nothing
happens.

If this function is applied to an @var{interp} value not owning the
underlying @code{Tcl_Interp} value: @var{interp} is finalised, but the
@code{Tcl_Interp} value is left alone.

After an invocation to this function: @tcl{} code can no longer be
evaluated in @var{interp}; to apply this function is equivalent to
invoking @tclcode{interp delete} upon the interpreter.
@end defun


@defun tcl-interp-eval @var{interp} @var{script}
Evaluate the @tcl{} @var{script} in the context of @var{interp}.  The
argument @var{script} must be a generalised C string, @cstringsref{}.
@end defun

@c page
@node plain misc
@section Miscellaneous operations


The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@deffn Syntax tcl-events @meta{symbol} @dots{}
Build and return an enumeration set from the given @meta{symbol}
arguments; the symbols represents flags to select the next event to
service in the event loop.  The following symbols are accepted:

@example
all              dont-wait
file             idle
timer            window
@end example

@noindent
and they correspond to the @tcl{} C preprocessor symbols:

@example
TCL_ALL_EVENTS          TCL_DONT_WAIT
TCL_FILE_EVENTS         TCL_IDLE_EVENTS
TCL_TIMER_EVENTS        TCL_WINDOW_EVENTS
@end example
@end deffn


@defun tcl-do-one-event @var{events-set}
Process the next event enqueued in the @tcl{} event loop.  To understand
what exactly this procedure does, read the @cfunc{Tcl_DoOneEvent} manual
page.

This function returns @true{} if some event was processed, else returns
@false{} (if the queue is empty).

@var{events-set} must be a value returned by the syntax
@syntax{tcl-events} representing an events selection value.
@end defun

@c page
@ignore

@node nau
@chapter Nausicaa programming interface


@cindex Library @value{NAUSICAA_SCHEME_LIB}
@cindex @value{NAUSICAA_SCHEME_LIB}, library


The library @value{NAUSICAA_SCHEME_LIB} implements an interface to
@value{FOREIGN_SCHEME_LIB} on top of the @library{nausicaa} language.

@menu
* nau intro::                   Introduction to the Nausicaa @api{}.
* nau alpha::                   Alpha objects handling.
@end menu

@c page
@node nau intro
@section Introduction to the Nausicaa @api{}


The library @value{NAUSICAA_SCHEME_LIB} reexports the following bindings
from @value{FOREIGN_SCHEME_LIB}:

@example
vicare-tcl-version-interface-current
vicare-tcl-version-interface-revision
vicare-tcl-version-interface-age
vicare-tcl-version
@end example

@c page
@node nau alpha
@section Alpha objects handling


@menu
* nau alpha objects::           Alpha objects.
* nau alpha methods::           Alpha methods.
@end menu

@c page
@node nau alpha objects
@subsection Alpha objects


The following bindings are exported by the library
@value{NAUSICAA_SCHEME_LIB}.


@deftp {Label Type} @aclass{tcl-alpha}
@cindex Argument @var{alpha}
@cindex @var{alpha} argument
Label type representing objects of type @objtype{tcl-alpha}.  When
instances of this type are used as arguments to functions: this
documentation identifies them as @var{alpha}.

Instances of this type must be finalised calling the method
@func{finalise}; whenever an instance of this type is garbage collected:
@func{finalise} is automatically applied to it and any error ignored.
@end deftp


@defop {Default constructor} @aclass{tcl-alpha} constructor
Build and return a new @class{tcl-alpha} object; if an error occurs
raise an exception.
@end defop


@defop {Maker syntax} @aclass{tcl-alpha} @aclass{tcl-alpha} ()
Build and return a new @class{tcl-alpha} using the default
constructor.
@end defop


@defmethod @aclass{tcl-alpha} finalise
Finalise the instance; return unspecified values.  It is fine to call
this method multiple times for the same instance.
@end defmethod


@deftypemethod @aclass{tcl-alpha} @aclass{boolean} alive?
Return @true{} if @var{obj} is an instance of @class{tcl-alpha} and it
has not been finalised; return @false{} otherwise.
@end deftypemethod


@c ------------------------------------------------------------

@subsubheading Object properties


@defmethod @aclass{tcl-alpha} putprop @var{key} @var{value}
Add a new property @var{key} to the property list of the instance;
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defmethod


@defmethod @aclass{tcl-alpha} getprop @var{key}
Return the value of the property @var{key} in the property list of the
instance; if @var{key} is not set: return @false{}.  @var{key} must be a
symbol.
@end defmethod


@defmethod @aclass{tcl-alpha} remprop @var{key}
Remove the property @var{key} from the property list of the instance; if
@var{key} is not set: nothing happens.  @var{key} must be a symbol.
@end defmethod


@defmethod @aclass{tcl-alpha} property-list
Return a new association list representing the property list of the
instance.  The order of the entries is the same as the property creation
order.
@end defmethod

@c ------------------------------------------------------------

@subsubheading Virtual fields


@deftypecv {Mutable virtual field} @aclass{tcl-alpha} @aclass{procedure} destructor
Retrieve or set a destructor function associated to the instance.

Whenever the instance is finalised, either explicitly with
@func{finalise} or implicitly by the garbage collector, the custom
destructor is applied to the instance before the internal state of the
instance is destroyed.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Other operations


@defmethod @aclass{tcl-alpha} hash
Return an exact integer to be used as hashtable key for the instance.
Hashtables having a @class{tcl-alpha} as key can be instantiated as
follows:

@example
(make-hashtable (lambda ((V <tcl-alpha>))
                  (V hash))
                eq?)
@end example
@end defmethod

@c page
@node nau alpha methods
@subsection Alpha methods


The following bindings are exported by the library
@value{NAUSICAA_SCHEME_LIB}.


@c @defmethod @aclass{tcl-alpha} name
@c Return a Scheme string representing the name of the given instance.
@c @end defmethod

@end ignore

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest version of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
the home page of the Vicare project is at:

@center @value{VICARE_HOMEPAGE_URL}

@noindent
@value{FOREIGN_PACKAGE} can be found here:

@center @value{FOREIGN_URL}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

